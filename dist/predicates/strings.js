'use strict';

var R = require('ramda'),
    __ = require('./_private.js');

var isString = R.is(String),
    isStringOfLength = __.ofLength(String, 'identical'),
    isStringOfLengthAtLeast = __.ofLength(String, 'gte'),
    isStringOfLengthAtMost = __.ofLength(String, 'lte'),
    isStringLongerThan = __.ofLength(String, 'gt'),
    isStringShorterThan = __.ofLength(String, 'lt');

var isStringContaining = R.curry(function (subStr, str) {
  return R.compose(R.not, R.equals(-1), R.indexOf(subStr))(str);
});
var isStringMatching = R.curry(function (pattern, str) {
  return R.test(pattern, str);
});
var stringIsOneOf = R.curry(function (selectionArr, str) {
  return R.allPass([R.is(String), R.contains(R.__, selectionArr)])(str);
});
var isStringOfLengthBetween = R.curry(function (min, max, str) {
  return R.both(isStringLongerThan(min), isStringShorterThan(max))(str);
});
var isStringOfLengthBetweenInclusive = R.curry(function (min, max, str) {
  return R.both(isStringOfLengthAtLeast(min), isStringOfLengthAtMost(max))(str);
});
var isEmail = R.test(/\S+@\S+/);

var isNumericString = function isNumericString(str) {
  return isString(str) && !isNaN(parseInt(str, 10));
};

var isTimestamp = R.test(/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/);

var isJSON = function isJSON(str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }

  return R.is(String, str);
};

module.exports = {
  isString: isString,
  isStringOfLength: isStringOfLength,
  isStringOfLengthAtLeast: isStringOfLengthAtLeast,
  isStringOfLengthAtMost: isStringOfLengthAtMost,
  isStringLongerThan: isStringLongerThan,
  isStringShorterThan: isStringShorterThan,
  isStringOfLengthBetween: isStringOfLengthBetween,
  isStringOfLengthBetweenInclusive: isStringOfLengthBetweenInclusive,
  isStringContaining: isStringContaining,
  isStringMatching: isStringMatching,
  stringIsOneOf: stringIsOneOf,
  isNumericString: isNumericString,
  isTimestamp: isTimestamp,
  isEmail: isEmail,
  isJSON: isJSON
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9wcmVkaWNhdGVzL3N0cmluZ3MuanMiXSwibmFtZXMiOlsiUiIsInJlcXVpcmUiLCJfXyIsImlzU3RyaW5nIiwiaXMiLCJTdHJpbmciLCJpc1N0cmluZ09mTGVuZ3RoIiwib2ZMZW5ndGgiLCJpc1N0cmluZ09mTGVuZ3RoQXRMZWFzdCIsImlzU3RyaW5nT2ZMZW5ndGhBdE1vc3QiLCJpc1N0cmluZ0xvbmdlclRoYW4iLCJpc1N0cmluZ1Nob3J0ZXJUaGFuIiwiaXNTdHJpbmdDb250YWluaW5nIiwiY3VycnkiLCJzdWJTdHIiLCJzdHIiLCJjb21wb3NlIiwibm90IiwiZXF1YWxzIiwiaW5kZXhPZiIsImlzU3RyaW5nTWF0Y2hpbmciLCJwYXR0ZXJuIiwidGVzdCIsInN0cmluZ0lzT25lT2YiLCJzZWxlY3Rpb25BcnIiLCJhbGxQYXNzIiwiY29udGFpbnMiLCJpc1N0cmluZ09mTGVuZ3RoQmV0d2VlbiIsIm1pbiIsIm1heCIsImJvdGgiLCJpc1N0cmluZ09mTGVuZ3RoQmV0d2VlbkluY2x1c2l2ZSIsImlzRW1haWwiLCJpc051bWVyaWNTdHJpbmciLCJpc05hTiIsInBhcnNlSW50IiwiaXNUaW1lc3RhbXAiLCJpc0pTT04iLCJKU09OIiwicGFyc2UiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsQ0FBQyxHQUFJQyxPQUFPLENBQUMsT0FBRCxDQUFsQjtBQUFBLElBQ01DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FEbEI7O0FBR0EsSUFBTUUsUUFBUSxHQUFrQkgsQ0FBQyxDQUFDSSxFQUFGLENBQUtDLE1BQUwsQ0FBaEM7QUFBQSxJQUNNQyxnQkFBZ0IsR0FBVUosRUFBRSxDQUFDSyxRQUFILENBQVlGLE1BQVosRUFBb0IsV0FBcEIsQ0FEaEM7QUFBQSxJQUVNRyx1QkFBdUIsR0FBR04sRUFBRSxDQUFDSyxRQUFILENBQVlGLE1BQVosRUFBb0IsS0FBcEIsQ0FGaEM7QUFBQSxJQUdN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LEVBQUFBLFFBQVEsRUFBUkEsUUFEZTtBQUVmRyxFQUFBQSxnQkFBZ0IsRUFBaEJBLGdCQUZlO0FBR2ZFLEVBQUFBLHVCQUF1QixFQUF2QkEsdUJBSGU7QUFJZkMsRUFBQUEsc0JBQXNCLEVBQXRCQSxzQkFKZTtBQUtmQyxFQUFBQSxrQkFBa0IsRUFBbEJBLGtCQUxlO0FBTWZDLEVBQUFBLG1CQUFtQixFQUFuQkEsbUJBTmU7QUFPZmdCLEVBQUFBLHVCQUF1QixFQUF2QkEsdUJBUGU7QUFRZkksRUFBQUEsZ0NBQWdDLEVBQWhDQSxnQ0FSZTtBQVNmbkIsRUFBQUEsa0JBQWtCLEVBQWxCQSxrQkFUZTtBQVVmUSxFQUFBQSxnQkFBZ0IsRUFBaEJBLGdCQVZlO0FBV2ZHLEVBQUFBLGFBQWEsRUFBYkEsYUFYZTtBQVlmVSxFQUFBQSxlQUFlLEVBQWZBLGVBWmU7QUFhZkcsRUFBQUEsV0FBVyxFQUFYQSxXQWJlO0FBY2ZKLEVBQUFBLE9BQU8sRUFBUEEsT0FkZTtBQWVmSyxFQUFBQSxNQUFNLEVBQU5BO0FBZmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFIgID0gcmVxdWlyZSgncmFtZGEnKSxcbiAgICAgIF9fID0gcmVxdWlyZSgnLi9fcHJpdmF0ZS5qcycpO1xuXG5jb25zdCBpc1N0cmluZyAgICAgICAgICAgICAgICA9IFIuaXMoU3RyaW5nKSxcbiAgICAgIGlzU3RyaW5nT2ZMZW5ndGggICAgICAgID0gX18ub2ZMZW5ndGgoU3RyaW5nLCAnaWRlbnRpY2FsJyksXG4gICAgICBpc1N0cmluZ09mTGVuZ3RoQXRMZWFzdCA9IF9fLm9mTGVuZ3RoKFN0cmluZywgJ2d0ZScpLFxuICAgICAgaXNTdHJpbmdPZkxlbmd0aEF0TW9zdCAgPSBfXy5vZkxlbmd0aChTdHJpbmcsICdsdGUnKSxcbiAgICAgIGlzU3RyaW5nTG9uZ2VyVGhhbiAgICAgID0gX18ub2ZMZW5ndGgoU3RyaW5nLCAnZ3QnKSxcbiAgICAgIGlzU3RyaW5nU2hvcnRlclRoYW4gICAgID0gX18ub2ZMZW5ndGgoU3RyaW5nLCAnbHQnKTtcblxuY29uc3QgaXNTdHJpbmdDb250YWluaW5nID0gUi5jdXJyeSgoc3ViU3RyLCBzdHIpID0+IHtcbiAgcmV0dXJuIFIuY29tcG9zZShSLm5vdCwgUi5lcXVhbHMoLTEpLCBSLmluZGV4T2Yoc3ViU3RyKSkoc3RyKTtcbn0pO1xuXG5jb25zdCBpc1N0cmluZ01hdGNoaW5nID0gUi5jdXJyeSgocGF0dGVybiwgc3RyKSA9PiB7XG4gIHJldHVybiBSLnRlc3QocGF0dGVybiwgc3RyKTtcbn0pO1xuXG5jb25zdCBzdHJpbmdJc09uZU9mID0gUi5jdXJyeSgoc2VsZWN0aW9uQXJyLCBzdHIpID0+IHtcbiAgcmV0dXJuIFIuYWxsUGFzcyhbUi5pcyhTdHJpbmcpLCBSLmNvbnRhaW5zKFIuX18sIHNlbGVjdGlvbkFycildKShzdHIpO1xufSk7XG5cbmNvbnN0IGlzU3RyaW5nT2ZMZW5ndGhCZXR3ZWVuID0gUi5jdXJyeSgobWluLCBtYXgsIHN0cikgPT4ge1xuICByZXR1cm4gUi5ib3RoKGlzU3RyaW5nTG9uZ2VyVGhhbihtaW4pLCBpc1N0cmluZ1Nob3J0ZXJUaGFuKG1heCkpKHN0cik7XG59KTtcblxuY29uc3QgaXNTdHJpbmdPZkxlbmd0aEJldHdlZW5JbmNsdXNpdmUgPSBSLmN1cnJ5KChtaW4sIG1heCwgc3RyKSA9PiB7XG4gIHJldHVybiBSLmJvdGgoaXNTdHJpbmdPZkxlbmd0aEF0TGVhc3QobWluKSwgaXNTdHJpbmdPZkxlbmd0aEF0TW9zdChtYXgpKShzdHIpO1xufSk7XG5cbmNvbnN0IGlzRW1haWwgPSBSLnRlc3QoL1xcUytAXFxTKy8pO1xuXG5jb25zdCBpc051bWVyaWNTdHJpbmcgPSBzdHIgPT4gaXNTdHJpbmcoc3RyKSAmJiAhaXNOYU4ocGFyc2VJbnQoc3RyLCAxMCkpO1xuXG5jb25zdCBpc1RpbWVzdGFtcCA9IFIudGVzdCgvKFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkXFwuXFxkKyhbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpfChcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZChbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpfChcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZChbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8WikpLyk7XG5cbmNvbnN0IGlzSlNPTiA9IChzdHIpID0+IHtcbiAgdHJ5IHtcbiAgICBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFIuaXMoU3RyaW5nLCBzdHIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nLFxuICBpc1N0cmluZ09mTGVuZ3RoLFxuICBpc1N0cmluZ09mTGVuZ3RoQXRMZWFzdCxcbiAgaXNTdHJpbmdPZkxlbmd0aEF0TW9zdCxcbiAgaXNTdHJpbmdMb25nZXJUaGFuLFxuICBpc1N0cmluZ1Nob3J0ZXJUaGFuLFxuICBpc1N0cmluZ09mTGVuZ3RoQmV0d2VlbixcbiAgaXNTdHJpbmdPZkxlbmd0aEJldHdlZW5JbmNsdXNpdmUsXG4gIGlzU3RyaW5nQ29udGFpbmluZyxcbiAgaXNTdHJpbmdNYXRjaGluZyxcbiAgc3RyaW5nSXNPbmVPZixcbiAgaXNOdW1lcmljU3RyaW5nLFxuICBpc1RpbWVzdGFtcCxcbiAgaXNFbWFpbCxcbiAgaXNKU09OXG59O1xuIl19